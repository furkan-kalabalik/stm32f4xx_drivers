
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000055c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000720  08000728  00010728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000720  08000720  00010728  2**0
                  CONTENTS
  4 .ARM          00000000  08000720  08000720  00010728  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000720  08000728  00010728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000720  08000720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000724  08000724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000728  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000728  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010728  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000894  00000000  00000000  00010758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023a  00000000  00000000  00010fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00011228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  000112d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000132f  00000000  00000000  00011350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b8c  00000000  00000000  0001267f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000519b  00000000  00000000  0001320b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000183a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d8  00000000  00000000  000183f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000708 	.word	0x08000708

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000708 	.word	0x08000708

08000204 <delay>:
 *      Author: fk97
 */

#include "stm32f446ze.h"

void delay(void) {
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for (int i = 0; i < 500000; ++i);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	ddf8      	ble.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	0007a11f 	.word	0x0007a11f

08000230 <main>:

int main() {
 8000230:	b580      	push	{r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpioLed7, gpioUserButton;
	gpioLed7.pGPIOx = GPIOB;
 8000236:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <main+0x90>)
 8000238:	613b      	str	r3, [r7, #16]
	gpioLed7.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800023a:	2307      	movs	r3, #7
 800023c:	753b      	strb	r3, [r7, #20]
	gpioLed7.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800023e:	2301      	movs	r3, #1
 8000240:	757b      	strb	r3, [r7, #21]
	gpioLed7.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000242:	2302      	movs	r3, #2
 8000244:	75bb      	strb	r3, [r7, #22]
	gpioLed7.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000246:	2300      	movs	r3, #0
 8000248:	763b      	strb	r3, [r7, #24]
	gpioLed7.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024a:	2300      	movs	r3, #0
 800024c:	75fb      	strb	r3, [r7, #23]

	gpioUserButton.pGPIOx = GPIOC;
 800024e:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <main+0x94>)
 8000250:	607b      	str	r3, [r7, #4]
	gpioUserButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000252:	230d      	movs	r3, #13
 8000254:	723b      	strb	r3, [r7, #8]
	gpioUserButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000256:	2300      	movs	r3, #0
 8000258:	727b      	strb	r3, [r7, #9]
	gpioUserButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025a:	2302      	movs	r3, #2
 800025c:	72bb      	strb	r3, [r7, #10]
	gpioUserButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800025e:	2300      	movs	r3, #0
 8000260:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000262:	2101      	movs	r1, #1
 8000264:	4816      	ldr	r0, [pc, #88]	; (80002c0 <main+0x90>)
 8000266:	f000 f859 	bl	800031c <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 800026a:	2101      	movs	r1, #1
 800026c:	4815      	ldr	r0, [pc, #84]	; (80002c4 <main+0x94>)
 800026e:	f000 f855 	bl	800031c <GPIO_PeriClockControl>
	GPIO_Init(&gpioLed7);
 8000272:	f107 0310 	add.w	r3, r7, #16
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f920 	bl	80004bc <GPIO_Init>
	GPIO_Init(&gpioUserButton);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f91c 	bl	80004bc <GPIO_Init>
	uint8_t status = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	77fb      	strb	r3, [r7, #31]
	while(1) {
		if(status) {
 8000288:	7ffb      	ldrb	r3, [r7, #31]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d005      	beq.n	800029a <main+0x6a>
			GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_7, SET);
 800028e:	2201      	movs	r2, #1
 8000290:	2107      	movs	r1, #7
 8000292:	480b      	ldr	r0, [pc, #44]	; (80002c0 <main+0x90>)
 8000294:	f000 f9ef 	bl	8000676 <GPIO_WriteToOutputPin>
 8000298:	e004      	b.n	80002a4 <main+0x74>
		} else {
			GPIO_WriteToOutputPin(GPIOB, GPIO_PIN_7, RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	2107      	movs	r1, #7
 800029e:	4808      	ldr	r0, [pc, #32]	; (80002c0 <main+0x90>)
 80002a0:	f000 f9e9 	bl	8000676 <GPIO_WriteToOutputPin>
		}

		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_13)) {
 80002a4:	210d      	movs	r1, #13
 80002a6:	4807      	ldr	r0, [pc, #28]	; (80002c4 <main+0x94>)
 80002a8:	f000 f9cf 	bl	800064a <GPIO_ReadFromInputPin>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0ea      	beq.n	8000288 <main+0x58>
			delay();
 80002b2:	f7ff ffa7 	bl	8000204 <delay>
			status = ~(status);
 80002b6:	7ffb      	ldrb	r3, [r7, #31]
 80002b8:	43db      	mvns	r3, r3
 80002ba:	77fb      	strb	r3, [r7, #31]
		if(status) {
 80002bc:	e7e4      	b.n	8000288 <main+0x58>
 80002be:	bf00      	nop
 80002c0:	40020400 	.word	0x40020400
 80002c4:	40020800 	.word	0x40020800

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f9e3 	bl	80006c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002fa:	f7ff ff99 	bl	8000230 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800030c:	08000728 	.word	0x08000728
  ldr r2, =_sbss
 8000310:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000314:	2000001c 	.word	0x2000001c

08000318 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC_IRQHandler>
	...

0800031c <GPIO_PeriClockControl>:
 *      Author: fk97
 */

#include "stm32f446ze_gpio.h"

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000328:	78fb      	ldrb	r3, [r7, #3]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d157      	bne.n	80003de <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a59      	ldr	r2, [pc, #356]	; (8000498 <GPIO_PeriClockControl+0x17c>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000336:	4b59      	ldr	r3, [pc, #356]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a58      	ldr	r2, [pc, #352]	; (800049c <GPIO_PeriClockControl+0x180>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOG)
			GPIOG_PCLK_DI();
		else if(pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
	}
}
 8000342:	e0a3      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a56      	ldr	r2, [pc, #344]	; (80004a0 <GPIO_PeriClockControl+0x184>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800034c:	4b53      	ldr	r3, [pc, #332]	; (800049c <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a52      	ldr	r2, [pc, #328]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000352:	f043 0302 	orr.w	r3, r3, #2
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e098      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a51      	ldr	r2, [pc, #324]	; (80004a4 <GPIO_PeriClockControl+0x188>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000362:	4b4e      	ldr	r3, [pc, #312]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a4d      	ldr	r2, [pc, #308]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000368:	f043 0304 	orr.w	r3, r3, #4
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e08d      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a4d      	ldr	r2, [pc, #308]	; (80004a8 <GPIO_PeriClockControl+0x18c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d106      	bne.n	8000386 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000378:	4b48      	ldr	r3, [pc, #288]	; (800049c <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a47      	ldr	r2, [pc, #284]	; (800049c <GPIO_PeriClockControl+0x180>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	e082      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a48      	ldr	r2, [pc, #288]	; (80004ac <GPIO_PeriClockControl+0x190>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800038e:	4b43      	ldr	r3, [pc, #268]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a42      	ldr	r2, [pc, #264]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000394:	f043 0310 	orr.w	r3, r3, #16
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039a:	e077      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a44      	ldr	r2, [pc, #272]	; (80004b0 <GPIO_PeriClockControl+0x194>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003a4:	4b3d      	ldr	r3, [pc, #244]	; (800049c <GPIO_PeriClockControl+0x180>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a3c      	ldr	r2, [pc, #240]	; (800049c <GPIO_PeriClockControl+0x180>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e06c      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a3f      	ldr	r2, [pc, #252]	; (80004b4 <GPIO_PeriClockControl+0x198>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ba:	4b38      	ldr	r3, [pc, #224]	; (800049c <GPIO_PeriClockControl+0x180>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a37      	ldr	r2, [pc, #220]	; (800049c <GPIO_PeriClockControl+0x180>)
 80003c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e061      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a3b      	ldr	r2, [pc, #236]	; (80004b8 <GPIO_PeriClockControl+0x19c>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d15d      	bne.n	800048c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80003d0:	4b32      	ldr	r3, [pc, #200]	; (800049c <GPIO_PeriClockControl+0x180>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a31      	ldr	r2, [pc, #196]	; (800049c <GPIO_PeriClockControl+0x180>)
 80003d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e056      	b.n	800048c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a2d      	ldr	r2, [pc, #180]	; (8000498 <GPIO_PeriClockControl+0x17c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80003e6:	4b2d      	ldr	r3, [pc, #180]	; (800049c <GPIO_PeriClockControl+0x180>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a2c      	ldr	r2, [pc, #176]	; (800049c <GPIO_PeriClockControl+0x180>)
 80003ec:	f023 0301 	bic.w	r3, r3, #1
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e04b      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a2a      	ldr	r2, [pc, #168]	; (80004a0 <GPIO_PeriClockControl+0x184>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <GPIO_PeriClockControl+0x180>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a26      	ldr	r2, [pc, #152]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000402:	f023 0302 	bic.w	r3, r3, #2
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e040      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a25      	ldr	r2, [pc, #148]	; (80004a4 <GPIO_PeriClockControl+0x188>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a21      	ldr	r2, [pc, #132]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000418:	f023 0304 	bic.w	r3, r3, #4
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e035      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <GPIO_PeriClockControl+0x18c>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d106      	bne.n	8000436 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000428:	4b1c      	ldr	r3, [pc, #112]	; (800049c <GPIO_PeriClockControl+0x180>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a1b      	ldr	r2, [pc, #108]	; (800049c <GPIO_PeriClockControl+0x180>)
 800042e:	f023 0308 	bic.w	r3, r3, #8
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	e02a      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <GPIO_PeriClockControl+0x190>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d106      	bne.n	800044c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 800043e:	4b17      	ldr	r3, [pc, #92]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000442:	4a16      	ldr	r2, [pc, #88]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000444:	f023 0310 	bic.w	r3, r3, #16
 8000448:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044a:	e01f      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	4a18      	ldr	r2, [pc, #96]	; (80004b0 <GPIO_PeriClockControl+0x194>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d106      	bne.n	8000462 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000454:	4b11      	ldr	r3, [pc, #68]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000458:	4a10      	ldr	r2, [pc, #64]	; (800049c <GPIO_PeriClockControl+0x180>)
 800045a:	f023 0320 	bic.w	r3, r3, #32
 800045e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000460:	e014      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <GPIO_PeriClockControl+0x198>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d106      	bne.n	8000478 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800046a:	4b0c      	ldr	r3, [pc, #48]	; (800049c <GPIO_PeriClockControl+0x180>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000476:	e009      	b.n	800048c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <GPIO_PeriClockControl+0x19c>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d105      	bne.n	800048c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	4a05      	ldr	r2, [pc, #20]	; (800049c <GPIO_PeriClockControl+0x180>)
 8000486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800048a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40020000 	.word	0x40020000
 800049c:	40023800 	.word	0x40023800
 80004a0:	40020400 	.word	0x40020400
 80004a4:	40020800 	.word	0x40020800
 80004a8:	40020c00 	.word	0x40020c00
 80004ac:	40021000 	.word	0x40021000
 80004b0:	40021400 	.word	0x40021400
 80004b4:	40021800 	.word	0x40021800
 80004b8:	40021c00 	.word	0x40021c00

080004bc <GPIO_Init>:

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80004bc:	b490      	push	{r4, r7}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	uint32_t temp;

	//1. configure mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d81f      	bhi.n	800050c <GPIO_Init+0x50>
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	461a      	mov	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	2103      	movs	r1, #3
 80004ec:	fa01 f303 	lsl.w	r3, r1, r3
 80004f0:	43db      	mvns	r3, r3
 80004f2:	4619      	mov	r1, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	400a      	ands	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6819      	ldr	r1, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	430a      	orrs	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
	} else {
		//interrupt
	}
	//2. configure speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	799b      	ldrb	r3, [r3, #6]
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	689a      	ldr	r2, [r3, #8]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	4619      	mov	r1, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	400a      	ands	r2, r1
 800053a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	6899      	ldr	r1, [r3, #8]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	430a      	orrs	r2, r1
 800054a:	609a      	str	r2, [r3, #8]
	//3. pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	79db      	ldrb	r3, [r3, #7]
 8000550:	461a      	mov	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	2103      	movs	r1, #3
 800056c:	fa01 f303 	lsl.w	r3, r1, r3
 8000570:	43db      	mvns	r3, r3
 8000572:	4619      	mov	r1, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	400a      	ands	r2, r1
 800057a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68d9      	ldr	r1, [r3, #12]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	430a      	orrs	r2, r1
 800058a:	60da      	str	r2, [r3, #12]
	//4. optype
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7a1b      	ldrb	r3, [r3, #8]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	2301      	movs	r3, #1
 80005aa:	408b      	lsls	r3, r1
 80005ac:	43db      	mvns	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	400a      	ands	r2, r1
 80005b6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	430a      	orrs	r2, r1
 80005c6:	605a      	str	r2, [r3, #4]

	//5. configure alt mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT_FN) {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d137      	bne.n	8000640 <GPIO_Init+0x184>
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8] |=  0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	08d2      	lsrs	r2, r2, #3
 80005da:	b2d0      	uxtb	r0, r2
 80005dc:	4602      	mov	r2, r0
 80005de:	3208      	adds	r2, #8
 80005e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	210f      	movs	r1, #15
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4311      	orrs	r1, r2
 80005fc:	f100 0208 	add.w	r2, r0, #8
 8000600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8] |=  pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7912      	ldrb	r2, [r2, #4]
 800060c:	08d2      	lsrs	r2, r2, #3
 800060e:	b2d1      	uxtb	r1, r2
 8000610:	460a      	mov	r2, r1
 8000612:	3208      	adds	r2, #8
 8000614:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7a5b      	ldrb	r3, [r3, #9]
 800061c:	4618      	mov	r0, r3
				<< (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	fa00 f303 	lsl.w	r3, r0, r3
 800062c:	461c      	mov	r4, r3
		pGPIOHandle->pGPIOx->AFR[pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/8] |=  pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4608      	mov	r0, r1
 8000634:	ea42 0104 	orr.w	r1, r2, r4
 8000638:	f100 0208 	add.w	r2, r0, #8
 800063c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bc90      	pop	{r4, r7}
 8000648:	4770      	bx	lr

0800064a <GPIO_ReadFromInputPin>:
		GPIOG_REG_RESET();
	else if(pGPIOx == GPIOH)
		GPIOH_REG_RESET();
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber) {
 800064a:	b480      	push	{r7}
 800064c:	b085      	sub	sp, #20
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
 8000652:	460b      	mov	r3, r1
 8000654:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> pinNumber) & 0x00000001);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	691a      	ldr	r2, [r3, #16]
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	fa22 f303 	lsr.w	r3, r2, r3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	73fb      	strb	r3, [r7, #15]
	return value;
 8000668:	7bfb      	ldrb	r3, [r7, #15]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint16_t)(pGPIOx->IDR);
	return value;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNumber, uint8_t value) {
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	70fb      	strb	r3, [r7, #3]
 8000682:	4613      	mov	r3, r2
 8000684:	70bb      	strb	r3, [r7, #2]
	if(value == GPIO_PIN_SET){
 8000686:	78bb      	ldrb	r3, [r7, #2]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d109      	bne.n	80006a0 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= 0x00000001 << pinNumber;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	78fa      	ldrb	r2, [r7, #3]
 8000692:	2101      	movs	r1, #1
 8000694:	fa01 f202 	lsl.w	r2, r1, r2
 8000698:	431a      	orrs	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	615a      	str	r2, [r3, #20]
	} else {
		pGPIOx->ODR &= ~(0x00000001 << pinNumber);
	}
}
 800069e:	e009      	b.n	80006b4 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(0x00000001 << pinNumber);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	78fa      	ldrb	r2, [r7, #3]
 80006a6:	2101      	movs	r1, #1
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	43d2      	mvns	r2, r2
 80006ae:	401a      	ands	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	615a      	str	r2, [r3, #20]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <__libc_init_array>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4d0d      	ldr	r5, [pc, #52]	; (80006f8 <__libc_init_array+0x38>)
 80006c4:	4c0d      	ldr	r4, [pc, #52]	; (80006fc <__libc_init_array+0x3c>)
 80006c6:	1b64      	subs	r4, r4, r5
 80006c8:	10a4      	asrs	r4, r4, #2
 80006ca:	2600      	movs	r6, #0
 80006cc:	42a6      	cmp	r6, r4
 80006ce:	d109      	bne.n	80006e4 <__libc_init_array+0x24>
 80006d0:	4d0b      	ldr	r5, [pc, #44]	; (8000700 <__libc_init_array+0x40>)
 80006d2:	4c0c      	ldr	r4, [pc, #48]	; (8000704 <__libc_init_array+0x44>)
 80006d4:	f000 f818 	bl	8000708 <_init>
 80006d8:	1b64      	subs	r4, r4, r5
 80006da:	10a4      	asrs	r4, r4, #2
 80006dc:	2600      	movs	r6, #0
 80006de:	42a6      	cmp	r6, r4
 80006e0:	d105      	bne.n	80006ee <__libc_init_array+0x2e>
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e8:	4798      	blx	r3
 80006ea:	3601      	adds	r6, #1
 80006ec:	e7ee      	b.n	80006cc <__libc_init_array+0xc>
 80006ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f2:	4798      	blx	r3
 80006f4:	3601      	adds	r6, #1
 80006f6:	e7f2      	b.n	80006de <__libc_init_array+0x1e>
 80006f8:	08000720 	.word	0x08000720
 80006fc:	08000720 	.word	0x08000720
 8000700:	08000720 	.word	0x08000720
 8000704:	08000724 	.word	0x08000724

08000708 <_init>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr

08000714 <_fini>:
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000716:	bf00      	nop
 8000718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071a:	bc08      	pop	{r3}
 800071c:	469e      	mov	lr, r3
 800071e:	4770      	bx	lr
